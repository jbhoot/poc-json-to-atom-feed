[
  {
    "url": "/2024/ki-first-impressions",
    "page_file": "site/2024/ki-first-impressions.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>Copy-pasting my comment in a converstion on lobste.rs titled <a href=\"https://lobste.rs/s/20t1jj/wonderful_vi#c_k7tr1m\">Wonderful vi</a>:</p>\n    \n    <p>I will put another one in the ring: <a href=\"https://ki-editor.github.io/ki-editor/\">Ki</a></p>\n\n    <p>Ki is similar to vim in that it uses modal editing.</p>\n\n    <p>Its similar to helix in that:</p>\n\n    <ol>\n      <li>It selects first, then acts on the selection.</li>\n      <li>It has first-class multi-cursor support</li>\n      <li>It aims to be low-config</li>\n      <li>It has built-in LSP support. Adding a new language is a matter of declaring it. (I added 2 on my own yesterday,\n        within 2 hours of using Ki. I could never have dared do this with vim/neovim).\n      </li>\n    </ol>\n\n    <p>Its different from both vim and Helix in that it splits the mental model into:</p>\n\n    <ol>\n      <li>selection mode;</li>\n      <li>movement;</li>\n      <li>action</li>\n    </ol>\n\n    <p>such that:</p>\n\n    <ol>\n      <li>A selection mode sets the current <em>unit</em> - <i>column/character, word, line, syntax node</i>, the latter two of which are semantic units derived from tree-sitter grammar.\n      </li>\n      <li>Because selection unit is already configured, movements are reduced to <code>hjkl</code>.</li>\n      <li>Actions, like helix, then act on the current selection.</li>\n    </ol>\n\n    <p>I think I made the explanation more complicated than the actual execution.</p>\n\n    <p>I’ve only been exploring it for a day. Navigation through syntax nodes is impressive, but also heavily reliant on\n      the language’s tree-sitter grammar being decent. Also, I’m not sure how much of a leg up it is against helix’s LSP\n      jump to symbol. But helix’s operations on syntax nodes surely feels like a second thought, when compared to\n      Ki’s.</p>\n\n    <p>There are other goodies:</p>\n\n    <ul>\n      <li>Everything is a buffer. So, same key-bindings are used everywhere.</li>\n      <li>It has a built-in file-tree explorer (using yaml!), which can be fuzzy-searched too.</li>\n      <li>Thought-out keybindings. For example, choosing between editor and system clipboard is a matter of <kbd>\\</kbd> key. <kbd>y</kbd> or <kbd>p</kbd> copies or pastes to editor clipboard, while <kbd>\\y</kbd> or <kbd>\\p</kbd> copies or pastes to the system clipboard.\n      </li>\n    </ul>",
    "excerpt": "I tried out a new modal editor called <i>Ki</i>, and inevitably measured my first impressions with Vim and Helix.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "20th September 2024",
    "published": "2024-09-20T12:31:21Z",
    "collections": [
      "Modal editing"
    ],
    "id": "urn:uuid:05744722-6bac-4385-b50b-1aa0a802eb53",
    "title": "Ki modal editor - first impressions"
  },
  {
    "url": "/2024/has-selector-for-toc",
    "page_file": "site/2024/has-selector-for-toc.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>Copy-pasting my comment in a converstion on lobste.rs titled <a href=\"https://lobste.rs/s/gery1i/undeniable_utility_css_has#c_unpyso\">The Undeniable Utility Of CSS :has</a>:</p>\n\n<p>My most recent favourite use of <code>:has</code> was to target insertion of a table of contents (TOC) on pages of my website.</p>\n\n<p>Assuming the following configuration for the static site generator I use (<a href=\"https://soupault.app\">soupault</a>):</p>\n\n<pre><code>[widgets.table-of-contents]\nselector = \"hgroup:has(h1)\"\naction = \"insert_after\"</code></pre>\n\n<p>the <code>:has</code> selector instructs soupault to only insert TOC in those pages which have an <code>h1</code> heading, and to insert it right after the first <code>hgroup</code> of the page, so that the TOC is located right after the heading + subtitle + timestamp + tags combo.</p>\n\n<p><code>:has</code> is a selector best used judiciously though due to performance concerns. Firefox (and presumably other browsers) help by displaying a tortoise symbol to flag an unconstrained <code>:has</code> selector.</p>",
    "excerpt": "Copy-pasting my comment in a converstion on lobste.rs titled <a href=\"https://lobste.rs/s/gery1i/undeniable_utility_css_has#c_unpyso\">The Undeniable Utility Of CSS :has</a>:",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "20th September 2024",
    "published": "2024-09-20T11:31:21Z",
    "collections": [
      "Note",
      "CSS"
    ],
    "id": "urn:uuid:472b7fe6-d06b-428d-91c0-e931e953b421",
    "title": "Copy-pasting my comment in a converstion on lobste.rs titled <a href=\"https://lobste.rs/s/gery1i/undeniable_utility_css_has#c_unpyso\">The Undeniable Utility Of CSS :has</a>:"
  },
  {
    "url": "/2024/forest-in-plastic",
    "page_file": "site/2024/forest-in-plastic.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>I had ordered 4 journal diaries. Even though they came in a lot, this is how each of them were packaged as: </p>\n  <figure>\n    <img src=\"/static/images/forest-in-plastic.jpg\" alt=\"An eco-friendly looking book with a forest printed on its cover is packaged in a transparent plastic bag\">\n    <figcaption>Conserving forest through plastic</figcaption>\n  </figure>",
    "excerpt": "I had ordered 4 journal diaries. Even though they came in a lot, this is how each of them were packaged as:",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "19th September 2024",
    "published": "2024-09-19T11:31:21Z",
    "collections": [
      "Note"
    ],
    "id": "urn:uuid:9feafff8-9e1f-4306-a081-2b762cd6244f",
    "title": "I had ordered 4 journal diaries. Even though they came in a lot, this is how each of them were packaged as:"
  },
  {
    "url": "/2024/old-camls-to-new-dune",
    "page_file": "site/2024/old-camls-to-new-dune.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>\n      Moved my years old OCaml projects to the new workflow with the\n      <a href=\"https://dune.ci.dev\">nightly dune dev edition</a>). I had to fill\n      up the barebones <code>dune-project</code> file with dependencies in one\n      of the projects. Otherwise, everything worked without a hitch!\n    </p>\n\n    <p>\n      Still lots to improve, but from the looks of it, we may not have to deal\n      with the dune and opam duo anymore.\n    </p>",
    "excerpt": "Moved my years old OCaml projects to the new workflow with the\n      <a href=\"https://dune.ci.dev\">nightly dune dev edition</a>). I had to fill\n      up the barebones <code>dune-project</code> file with dependencies in one\n      of the projects. Otherwise, everything worked without a hitch!",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "19th September 2024",
    "published": "2024-09-19T10:00:00Z",
    "collections": [
      "Note",
      "OCaml"
    ],
    "id": "urn:uuid:de433593-ba30-4de1-8f3b-588a8eb8c460",
    "title": "Moved my years old OCaml projects to the new workflow with the\n      <a href=\"https://dune.ci.dev\">nightly dune dev edition</a>). I had to fill\n      up the barebones <code>dune-project</code> file with dependencies in one\n      of the projects. Otherwise, everything worked without a hitch!"
  },
  {
    "url": "/2024/no-script-in-innerhtml",
    "page_file": "site/2024/no-script-in-innerhtml.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>Forgotten lesson remembered after staring 5 minutes at the screen: <code>innerHTML</code> cannot contain a <code>&lt;script&gt;</code> tag.</p>",
    "excerpt": "Forgotten lesson remembered after staring 5 minutes at the screen: <code>innerHTML</code> cannot contain a <code>&lt;script&gt;</code> tag.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "12th September 2024",
    "published": "2024-09-12T11:31:21Z",
    "collections": [
      "Note",
      "JavaScript"
    ],
    "id": "urn:uuid:b2e08fa4-8283-4044-a5ed-84a1531faf94",
    "title": "Forgotten lesson remembered after staring 5 minutes at the screen: <code>innerHTML</code> cannot contain a <code>&lt;script&gt;</code> tag."
  },
  {
    "url": "/2024/cool-ways-to-get-uuid",
    "page_file": "site/2024/cool-ways-to-get-uuid.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>OK, may be not cool enough for Linux veterans, but cool enough for me!</p>\n\n  <p>There are two ways, in the order of coolness:</p>\n\n  <ol>\n    <li>\n      <p>On Linux only: <code>cat /proc/sys/kernel/random/uuid</code></p>\n\n<pre><code>$ cat /proc/sys/kernel/random/uuid\nfa199476-f6f3-4a32-ab89-91d81d9cc319</code></pre>\n    </li>\n    <li>\n      <p>On Linux and macOS: <code>uuidgen</code></p>\n      <pre><code>$ uuidgen\n6180fa98-ddd7-4777-a40d-b548db1f3444</code></pre>\n\n      <p>On macOS, <code>uuidgen</code> gives a UUID in uppercase. You can pipe it to <code>tr</code> command to translate it to lowercase.</p>\n\n<pre><code># On macOS\n$ uuidgen\n58D8D68C-B64D-4E1E-AC0F-B00AFAC1E895\n\n$ uuidgen | tr \"[:upper:]\" \"[:lower:]\"\n919ae848-df9c-41fa-b59f-de4b933c927c</code></pre>\n    </li>\n  </ol>",
    "excerpt": "OK, may be not cool enough for Linux veterans, but cool enough for me!",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "7th September 2024",
    "published": "2024-09-07T11:31:21Z",
    "collections": [
      "Linux",
      "MacOS"
    ],
    "id": "urn:uuid:214c8527-7318-4c6c-ae37-05765bdc353d",
    "title": "Cool ways to generate a UUID"
  },
  {
    "url": "/2024/curiosity-over-judgement",
    "page_file": "site/2024/curiosity-over-judgement.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p><i>Be curious, not judgmental.</i> I don't know who said it, but I heard it in the TV Show <i>Ted Lasso</i>. And boy, is it cathartic in its own way!</p>\n\n  <p>Just being non-judgmental hasn't really worked for me in the past. I needed to replace it with something. Curiosity is a good replacement.</p>\n\n  <p>As a pleasant side effect, this approach freed me from the pressure of being right or the fear of being wrong. If you are judging something or someone, you better be right about it. No such stress anymore!</p>\n\n  <aside>Somewhat amusingly, this also got me to configure my <a href=\"https://addons.mozilla.org/en-US/firefox/addon/enforce-browser-fonts/\">Firefox add-on</a> to allow website-defined fonts by default. Earlier, I had it configured to force specific fonts.</aside>",
    "excerpt": "I don't know about the cat, but curiosity certainly killed the judgmental!",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "7th September 2024",
    "published": "2024-09-07T10:31:21Z",
    "collections": [
      "Philosophy of life"
    ],
    "id": "urn:uuid:06da33f8-2f18-431a-99f2-d2085e8a8702",
    "title": "Choosing curious over judgmental"
  },
  {
    "url": "/2024/scala-3_5-scripting",
    "page_file": "site/2024/scala-3_5-scripting.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>Scala 3.5's CLI now makes scripting with scala seamless! Just a single-file script setup!</p>\n\n<p>For example, due to the single-file scripting nature imparted by <i>Scala 3.5 CLI</i>, I was able to embed a Scala script in a <i>node.js</i> project to analyse parsing of a geometric Point stored in <i>MySQL 8</i>. The script is <a href=\"https://github.com/jbhoot/poc-buggy-geographic-point-parsing-by-node-mysql2/blob/main/jdbc-analysis/main.scala\">hosted on GitHub</a>.</p>\n\n<p>With Scala 3.5, plus a built-in watcher, and a large scala/jvm ecosystem, Scala has become a good alternative for scripting.</p>",
    "excerpt": "Scala 3.5's CLI now makes scripting with scala seamless! Just a single-file script setup!",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "24th August 2024",
    "published": "2024-08-24T11:31:21Z",
    "collections": [
      "Note",
      "Scala"
    ],
    "id": "urn:uuid:c10c93ba-45e0-4f6f-b556-b0988ef852a3",
    "title": "Scala 3.5's CLI now makes scripting with scala seamless! Just a single-file script setup!"
  },
  {
    "url": "/2024/task-failed-successfully-linux-edition",
    "page_file": "site/2024/task-failed-successfully-linux-edition.html",
    "nav_path": [
      "2024"
    ],
    "content": "<figure>\n      <figcaption>Task failed successfully – Linux edition</figcaption>\n      <img src=\"/static/images/task-failed-successfully-linux-edition.jpeg\" alt=\"Screenshot of a message printed by pinfo command on terminal on Linux that says 'crash with: Success'\">\n    </figure>",
    "excerpt": "<img alt=\"Post author's photo\" class=\"u-photo\" src=\"/static/images/profile-pic-closeup-round.png\">\n  <span class=\"stack\" style=\"--stack-gap:0;\">\n    <span>Written by <a class=\"p-author h-card\" href=\"https://bhoot.dev/about\">Jayesh Bhoot</a></span>\n  </span>",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "20th August 2024",
    "published": "2024-08-20T11:00:00Z",
    "collections": [
      "Note"
    ],
    "id": "urn:uuid:cb0478f2-de68-414b-b6c3-023ef44c13dc",
    "title": "Task failed successfully - Linux edition"
  },
  {
    "url": "/2024/british-vs-american-comedy-drama",
    "page_file": "site/2024/british-vs-american-comedy-drama.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>They always felt different from each other, but I could never quite put a finger on the difference.</p>\n\n<p>Then it hit me today, while I was watching a British series called <a href=\"https://tv.apple.com/in/episode/nikki-and-jason/umc.cmc.2dzdkdvedw0n9h25d49y9lh99?action=playSmartEpisode\">Trying</a>.</p>\n\n<p>In American shows, the script feels quite...scripted. Every other dialogue in a conversation is written to be a punchline or a one-liner.</p>\n\n<p>British dramas feel more organic – a conversation goes on with (wry, dry) humour sprinkled here and there.</p>",
    "excerpt": "They always felt different from each other, but I could never quite put a finger on the difference.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "7th July 2024",
    "published": "2024-07-07T11:31:21Z",
    "collections": [],
    "id": "urn:uuid:4a3058d8-0c53-4aaa-ad99-daf4254eac48",
    "title": "British v/s American comedy dramas"
  },
  {
    "url": "/2024/mfu-nominee-verification",
    "page_file": "site/2024/mfu-nominee-verification.html",
    "nav_path": [
      "2024"
    ],
    "content": "<div class=\"toc\"></div>\n\n<p>Tip for Mutual Fund Utilities (MFU) users:</p>\n\n<p>While transacting for a new folio, if you are stuck at \"Nominee Verify\" pop-up even after verifying the nominee(s), then check that:\n</p>\n\n  <ol>\n    <li>Whether there are multiple holders of that CAN</li>\n    <li>Whether *all* of the holders have verified the nominee(s)</li>\n  </ol>\n\n  <img src=\"/static/images/mfu-nominee-verification-bug-fix.png\" alt=\"Screenshot of Nominee Details section in Account Profile, showing whether some or all of the holders of a selected CAN account have verified the nominee details. All holders must have verified the nominee details in order to be able to transact for a new folio.\">\n\n<h2>The problem</h2>\n\n<p>I forgot to take screenshots, but here is a close enough description.</p>\n\n<p>If none of the holders have verified the nominee details, then MFU's interface in this section provides a \"Verify nominee\" button *only* for the primary holder.</p>\n\n<p>Once a primary holder has verified the nominee details, the interface looks like the verification is already complete. But New Folio transaction will still ask you to Verify Nominee. Very frustrating.</p>\n\n<h2>The solution</h2>\n\n<p>In order for any holders to verify nominee details, use this link: <a href=\"https://mfuonline.com/CNOMV\">https://mfuonline.com/CNOMV</a></p>",
    "excerpt": "Tip for Mutual Fund Utilities (MFU) users:",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "23rd June 2024",
    "published": "2024-06-23T11:31:21Z",
    "collections": [],
    "id": "urn:uuid:9905f662-e652-4747-949b-37c1112e1bad",
    "title": "Stubborn pop-up on <i>Mutual Fund Utilities (MFU)</i> website"
  },
  {
    "url": "/2024/effective-scala-8-oop",
    "page_file": "site/2024/effective-scala-8-oop.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>Flip the perspective on tools like interfaces and traits. Don't see them as a way for objects to share an interface, but as an abstraction over implementations.</p>\n\n<p>So, not: DatabaseAccess -&gt; (InMemoryDatabase, PhysicalDatabase)</p>\n\n<p>but:     DatabaseAccess &lt;- (InMemoryDatabase, PhysicalDatabase)</p>\n\n<p>An interface is more usefully seen as:</p>\n\n<p>- DatabaseAccess creates an abstraction barrier so we can ignore which database is used underneath</p>\n\n<p>than as:</p>\n\n<p>- DatabaseAccess allows various databases to share the interface.</p>\n\n<p>The former encourages the view/use of interface as an abstraction over implementation.</p>",
    "excerpt": "Flip the perspective on tools like interfaces and traits. Don't see them as a way for objects to share an interface, but as an abstraction over implementations.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "14th May 2024",
    "published": "2024-05-14T11:31:21Z",
    "collections": [
      "Effective Scala series",
      "OOP"
    ],
    "id": "urn:uuid:b1319873-65a5-49e3-82aa-334e3fb7e353",
    "title": "Effective Scala, part 8 - OO concepts"
  },
  {
    "url": "/2024/effective-scala-series",
    "page_file": "site/2024/effective-scala-series.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>This is a series of articles I wrote while going through the Coursera Course <a href=\"https://www.coursera.org/learn/effective-scala\">Effective Programming in Scala</a>.</p>\n\n<ol>\n<li><a href=\"/2024/effective-scala-1-elements-of-a-program\">Elements of a program</a></li>\n<li><a href=\"/2024/effective-scala-2-domain-modelling\">Domain Modelling</a></li>\n<li><a href=\"/2024/effective-scala-3-compatibility-roulette\">Compatibility roulette in Scala</a></li>\n<li><a href=\"/2024/effective-scala-4-method-vs-function\">Function v/s method</a></li>\n<li><a href=\"/2024/effective-scala-5-collections\">Collections in Scala</a></li>\n<li><a href=\"/2024/effective-scala-6-sbt\">Scala Build Tool (SBT)</a></li>\n<li><a href=\"/2024/effective-scala-7-project-entry-point\">Entry point of a Scala project</a></li>\n</ol>",
    "excerpt": "This is a series of articles I wrote while going through the Coursera Course <a href=\"https://www.coursera.org/learn/effective-scala\">Effective Programming in Scala</a>.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "8th May 2024",
    "published": "2024-05-08T11:31:21Z",
    "collections": [
      "Scala",
      "Effective Scala series"
    ],
    "id": "urn:uuid:5a99b823-fa04-4e97-b94f-a0e57f0f879a",
    "title": "Series - Effective Programming in Scala"
  },
  {
    "url": "/2024/effective-scala-7-project-entry-point",
    "page_file": "site/2024/effective-scala-7-project-entry-point.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>While a scala worksheet are evaluated from top to bottom, a scala project needs an entry point.</p>\n\n<p>Only two requirements:</p>\n\n<ul>\n<li>It needs to be a top-level <em>method</em> or an object-level method, but not a class-level method</li>\n<li>It needs to be annotated with <code>@main</code></li>\n</ul>\n\n<p>Otherwise</p>\n\n<ul>\n<li>It can be named anything.</li>\n<li>It can be put in an arbitrary source file.</li>\n</ul>\n\n<p>A source file in a project cannot contain top-level statements (e.g., <code>println</code>), only top-level definitions (<code>def</code>, <code>val</code>, <code>var</code>, <code>trait</code>, <code>object</code>, <code>class</code> definitions)\n.</p>",
    "excerpt": "While a scala worksheet are evaluated from top to bottom, a scala project needs an entry point.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "7th May 2024",
    "published": "2024-05-07T11:31:21Z",
    "collections": [
      "Effective Scala series"
    ],
    "id": "urn:uuid:3194d9ee-2397-4b1a-ba7a-125dbe10fb30",
    "title": "Effective Scala, part 7 - entry point of a project"
  },
  {
    "url": "/2024/effective-scala-6-sbt",
    "page_file": "site/2024/effective-scala-6-sbt.html",
    "nav_path": [
      "2024"
    ],
    "content": "<div class=\"toc\"></div>\n\n<p><code>src/project</code> dir contains configuration about SBT - <code>build.properties</code> to specify sbt version, <code>plugins.sbt</code> to specify sbt plugins, and so on.</p>\n\n<p><code>src/build.sbt</code> contains the configuration to build the project itself.</p>\n\n<p>̄An sbt build (<code>build.sbt</code>) is composed of - settings and tasks. A setting parametrises the build, and consists of a key value pair. A task may also by parametrised by settings.</p>\n\n<h2>Configurations in <code>build.sbt</code></h2>\n\n<ul>\n<li>Compile (default configuration where sbt looks first)</li>\n<li>Test</li>\n<li>Zero (no specified config, where fallback values live)</li>\n</ul>\n\n<h2>Scoping a Setting</h2>\n\n<p>Different values can be applied to a single setting by scoped its key.</p>\n\n<p>A key can be scoped along any of the 3 axes:</p>\n\n<ul>\n<li>Configuration. e.g., <code>Compile / sourceDirectory</code>, <code>Test / sourceDirectory</code></li>\n<li>Task. e.g., <code>includeFilter</code>, <code>unmanagedSources / includeFilter</code> where the latter <code>includeFilter</code> is scoped by <code>unmanagedSources</code> task.</li>\n<li>Sub-project. e.g., <code>mainProject / scalaVersion</code>, <code>subProject / scalaVersion</code></li>\n</ul>\n\n<p>Axes can be combined too: <code>subProject / Compile / unmanagedSources / includeFilter</code>. I think the order is: <strong>project / configuration / task / key</strong>.</p>",
    "excerpt": "<code>src/project</code> dir contains configuration about SBT - <code>build.properties</code> to specify sbt version, <code>plugins.sbt</code> to specify sbt plugins, and so on.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "6th May 2024",
    "published": "2024-05-06T11:31:21Z",
    "collections": [
      "Effective Scala series"
    ],
    "id": "urn:uuid:b84ce392-affe-484b-a5eb-fde46cdd0ad8",
    "title": "Effective Scala, part 6 - Scala Build Tool (SBT)"
  },
  {
    "url": "/2024/effective-scala-5-collections",
    "page_file": "site/2024/effective-scala-5-collections.html",
    "nav_path": [
      "2024"
    ],
    "content": "<div class=\"toc\"></div>\n\n<p>Operations on collections can be classified into:</p>\n\n<ul>\n<li><strong>construct</strong> ops (<code>::</code>, <code>+:</code>, <code>:+</code>, <code>+</code>, <code>++</code>);</li>\n<li><strong>query</strong> ops (<code>size</code>, <code>empty</code>, <code>head</code>, <code>tail</code>, <code>find</code>, <code>filter</code>); and</li>\n<li><strong>transform</strong> ops (<code>map</code>, <code>fold</code>)</li>\n</ul>\n\n<h2>Infix construct operators</h2>\n\n<p>There are a shitload of them, most of them with low recall value to a beginner.</p>\n\n<h3>Immutable operators</h3>\n<ul>\n<li><code>::</code> to prepend to a <em>List</em>. <code>1 :: List.empty</code></li>\n<li><code>+:</code> to prepend to a <code>Sequence</code> collection, including <code>List</code>. <code>1 +: mutable.ArrayBuffer(2, 3)</code></li>\n<li><code>:+</code> to append to a <code>Sequence</code> collection</li>\n<li><code>+</code> to add a (key, value) tuple to a <em>Map</em></li>\n<li><code>++</code> constructs a new collection out of two collections. <code>Map((1, \"1\"), (2, \"2\")) ++ Map((4, \"4\"))</code></li>\n</ul>\n\n<h3>Mutable operators</h3>\n<ul>\n<li><code>+=:</code> to prepend to a <code>Sequence</code> collection</li>\n<li><code>+=</code> to append to a <code>Sequence</code> collection</li>\n<li><code>++=</code> concatenates two collections, mutates the first one.</li>\n</ul>\n\n<h2>List</h2>\n\n<p>A list is constructed from right to left:</p>\n\n<pre><code>1 :: 2 :: 3 :: Nil</code></pre>\n\n<h2>Option</h2>\n\n<p>Option is actually a collection of zero or one element.</p>\n\n<p>This explains why Option type has a <code>map</code> or <code>filter</code> operations even in OCaml.</p>\n\n<p>No indexed access (<code>opt(0)</code>) though, understandably.</p>",
    "excerpt": "Operations on collections can be classified into:",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "24th April 2024",
    "published": "2024-04-24T11:31:21Z",
    "collections": [
      "Effective Scala series"
    ],
    "id": "urn:uuid:b62ea789-d0e9-4e7f-9b0e-40d17322bef7",
    "title": "Effective Scala, part 5 - collections"
  },
  {
    "url": "/2024/effective-scala-4-method-vs-function",
    "page_file": "site/2024/effective-scala-4-method-vs-function.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>A function is a value in Scala, while a method is not. So the former can be passed as a parameter of a function or a method, and can be returned as a value. Method cannot do any of those.</p>\n\n<p>A function is a value in Scala. All values are objects in Scala. An object can have methods. So a function in Scala can have methods.</p>\n\n<p>Any function in Scala has a default <code>apply</code> method. <code>inc(1)</code> is a shorthand for <code>inc.apply(1)</code>.</p>",
    "excerpt": "A function is a value in Scala, while a method is not. So the former can be passed as a parameter of a function or a method, and can be returned as a value. Method cannot do any of those.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "21st April 2024",
    "published": "2024-04-21T11:31:21Z",
    "collections": [
      "Effective Scala series"
    ],
    "id": "urn:uuid:af3fbc76-728b-45ac-9c02-886b7aa2db68",
    "title": "Effective Scala, part 4 - function v/s method"
  },
  {
    "url": "/2024/effective-scala-3-compatibility-roulette",
    "page_file": "site/2024/effective-scala-3-compatibility-roulette.html",
    "nav_path": [
      "2024"
    ],
    "content": "<div class=\"toc\"></div>\n\n<p>I am going through the course <a href=\"https://www.coursera.org/learn/effective-scala\">Effective Programming in Scala</a> on Coursera, and ran into build import errors in the very first assignment (fireworks).</p>\n\n<h2>Problem</h2>\n\n<p>While importing the fireworks project in VSCode-with-Metals, I encountered an error that started with:</p>\n\n<pre><code>[..]bad constant pool index: [..]</code></pre>\n\n<p>Looks like an error right out of a database connection pool library!</p>\n\n<h2>Attempt 1</h2>\n\n<p>One of the suggested solutions on Discord was to ensure that the versions of java, scala, and sbt exposed in the PATH are compatible with each other.</p>\n\n<p>Check the <a href=\"https://docs.scala-lang.org/overviews/jdk-compatibility/overview.html\">compatibility tables</a>.</p>\n\n<p>But these were already compatible in my case.</p>\n\n<h2>Attempt 2</h2>\n\n<p>I roughly knew that *.sbt files describe the build of a project. Because the name bore relevance to build process, I also counted in a file I noticed in early debugging: <code>build.properties</code>.</p>\n\n<p>So my first small scala project, and I am staring at the following list of *.sbt: </p>\n\n<pre><code>zsh | ~/Downloads\n$ tree -a -P \"*.sbt\" -P \"*.properties\" fireworks\nfireworks\n├── assignment.sbt\n├── build.sbt\n├── project\n│   ├── build.properties\n│   ├── buildSettings.sbt\n│   └── plugins.sbt\n└── src</code></pre>\n\n<p>And all of them were staring back at me, daring me to find which one of them is hiding the cause of the error.</p>\n\n<p>Anyway, enough drama.</p>\n\n<p>On a hunch, I decided to match the versions of sbt and scala mentioned in these .sbt files with the ones exposed in the PATH.</p>\n\n<p>The mismatch turned out to be in <code>build.properties</code>.</p>\n\n<pre><code>zsh | ~/projects/effective-scala/week-1/fireworks\n$ sbt -V\nsbt version in this project: 1.9.9\nsbt script version: 1.9.9\n\n$ cat project/build.properties\nsbt.version=1.8.2</code></pre>\n\n<p>I matched the versions to be <code>1.9.9</code>, and re-ran the import. It worked.</p>\n\n<h2>TL;DR</h2>\n\n<ul>\n<li>Ensure that the versions of java, scala, and sbt exposed in the PATH are compatible with each other. Use the official <a href=\"https://docs.scala-lang.org/overviews/jdk-compatibility/overview.html\">compatibility tables</a>.</li>\n<li>Ensure that the versions of sbt and scala exposed in the PATH match with the versions mentioned in the build files (like built.sbt, build.properties). Best make them identical.</li>\n</ul>\n\n<h2>Conclusion</h2>\n\n<p>I hope this was the correct solution.</p>\n\n<p>As people who make tools to make people's lives easier, we sure love to torture ourselves with our own tools.</p>",
    "excerpt": "I am going through the course <a href=\"https://www.coursera.org/learn/effective-scala\">Effective Programming in Scala</a> on Coursera, and ran into build import errors in the very first assignment (fireworks).",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "19th April 2024",
    "published": "2024-04-19T11:31:21Z",
    "collections": [
      "Effective Scala series"
    ],
    "id": "urn:uuid:63a0e01e-eacb-486e-9f72-959cc2ccb742",
    "title": "Effective Scala, part 3 - compatibility roulette"
  },
  {
    "url": "/2024/effective-scala-2-domain-modelling",
    "page_file": "site/2024/effective-scala-2-domain-modelling.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>Finding the <em>right</em> level of abstraction is more important than the best level of abstraction.</p>\n\n<p>For example, in a problem involving doors and windows and facades, if the domain is constrained to only deal with surface area, then modelling the doors and windows and facade in terms of <strong>Rectangle</strong> is the right level of abstraction instead of modelling them as Door, Window, and Facade respectively.</p>",
    "excerpt": "Finding the <em>right</em> level of abstraction is more important than the best level of abstraction.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "16th April 2024",
    "published": "2024-04-16T11:31:21Z",
    "collections": [
      "Effective Scala series"
    ],
    "id": "urn:uuid:321f0aca-5212-4b8b-8994-946cac15316f",
    "title": "Effective Scala, part 2 - domain modelling"
  },
  {
    "url": "/2024/effective-scala-1-elements-of-a-program",
    "page_file": "site/2024/effective-scala-1-elements-of-a-program.html",
    "nav_path": [
      "2024"
    ],
    "content": "<div class=\"toc\"></div>\n\n<h2>Value (or Data in this context)</h2>\n\n<p>A value is the representation of some entity that can be manipulated by a program.</p>\n\n<p>Value is the most abstract definition here, but it is made concrete by subsequent definitions.</p>\n\n<h2>Literal</h2>\n\n<p>A literal is a text representation of a value in source code.</p>\n\n<ul>\n<li><code>1</code> is an integer literal</li>\n<li><code>\"1\"</code> is a string literal</li>\n<li><code>(x) =&gt; x * x</code> is a <strong>function literal</strong> aka anonymous function in JavaScript</li>\n<li><code>{id: 1, (x) =&gt; x * x}</code> is an <strong>object literal</strong> in JavaScript, etc.</li>\n</ul>\n\n<h2>(Data) Type</h2>\n\n<p>A data type (or simply type) is a collection of data values.</p>\n\n<p>A type is usually specified by a set of possible values, and a set of allowed <strong>operations</strong> on these\nvalues.</p>\n\n<p>The members of a type are the values of that type.</p>\n\n<h2>Expression</h2>\n\n<p>An expression is a syntactic entity that can evaluate to a value.</p>\n\n<p>An expression combines literals, constants,\nvariables, and expressions, <strong>by applying operations</strong> (functions, operators, methods) on them.</p>\n\n<ul>\n<li><code>1</code> is an integer literal that is also a simple expression that evaluates to value <code>1</code>. Value\n<code>1</code> belongs to type <code>Integer</code>.\n</li>\n<li><code>\"Alice\" + \" Wonderland\"</code> is an expression that combines two string literals by applying the operation\n<code>+</code> on\nthem. Literal <code>\"Alice\"</code> represents the value <code>Alice</code>. The value <code>Alice</code> belongs to type\n<code>String</code>. The operation <code>+</code> is an operator/method defined on type <code>String</code> and can be applied on literals, constants, variables that represent a value of type <code>String</code>.\n</li>\n<li><code>(\"Alice\" + \" Wonderland\").toUpperCase</code> is an expression in which operation <code>toUpperCase</code> is\napplied on the expression <code>\"Alice\" + \" Wonderland\"</code>. The expression <code>\"Alice\" + \" Wonderland\"</code> evaluates to a value <code>Alice Wonderland</code> of type <code>String</code>. The operation <code>toUpperCase</code> is a method defined on type <code>String</code> and can be applied on literals, constants, variables that represent a value of type <code>String</code>.\n</li>\n</ul>\n\n<h2>Program</h2>\n\n<p>A program expresses a computation. (A computation is any type of arithmetic or non-arithmetic calculation that is\nwell-defined).</p>\n\n<p>A program is a sequence of expressions (and/or statements too, but let's keep it simple here).</p>\n\n<ul>\n<li><code>1 + 1</code> is an expression, but also a program which expresses the computation of adding 1 to 1.</li>\n</ul>\n\n<h2>Another perspective on Type</h2>\n\n<p>Types define the rules for combining expressions. The types define how the expressions can be combined, by applying\noperations to them. For this reason, operations are also called members of types.</p>\n\n<p>For instance, the &amp;&amp; operation (and) is available on the type Boolean, and it expects another Boolean value on its\nright-hand side. We say that the type Boolean has a member named &amp;&amp; (and), which takes another Boolean value as a\nparameter.</p>\n\n<p>If you try to apply an operation to an expression,\nwhose type does not provide such an operation, it's an error.</p>",
    "excerpt": "A value is the representation of some entity that can be manipulated by a program.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "15th April 2024",
    "published": "2024-04-15T16:31:21Z",
    "collections": [
      "Effective Scala series"
    ],
    "id": "urn:uuid:7baad03d-26bd-44b2-a645-36b00f7707a1",
    "title": "Effective Scala, part 1 - elements of a program"
  },
  {
    "url": "/2024/editor-tooling-in-ocaml",
    "page_file": "site/2024/editor-tooling-in-ocaml.html",
    "nav_path": [
      "2024"
    ],
    "content": "<div class=\"toc\"></div>\n\n<p>I have gone through some options over time. Here is an overview for my future self.</p>\n\n<h2>Relevant background</h2>\n\n<h3>Package and build tooling</h3>\n\n<p>Over time, the OCaml community has converged on:</p>\n\n<ul>\n<li><strong>opam</strong> as a package manager and a project environment handler</li>\n<li><strong>dune</strong> as a build system</li>\n<li><strong>ocamlformat</strong> as a code formatter</li>\n</ul>\n\n<p>Other tools in these spaces exist, but the above two are officially recommended, and relatively more popular.</p>\n\n<h3>Editor service - <strong>Merlin</strong></h3>\n\n<p><strong>Merlin</strong> is a \"headless\" tool which provides modern IDE features for OCaml/ReasonML code.</p>\n\n<p>Supporting OCaml in an editor/IDE is essentially a matter of talking to Merlin.</p>\n\n<h3>Editor service - LSP</h3>\n\n<p>With the advent of VS Code and Language Server Protocol, <strong>ocaml-lsp</strong> was built as an LSP wrapper on top of Merlin.</p>\n\n<h3>How everything comes together</h3>\n\n<p>A glue package integrates the editor service (merlin or ocaml-lsp) with an editor.</p>\n\n<p>The glue package assumes that the editor service is available in the user environment. The recommended approach is to have opam create a project-specific environment (called a <b>opam local switch</b>), and install merlin or ocaml-lsp in that env.</p>\n\n<h3>merlin v/s ocaml-lsp</h3>\n\n<h4>Feature parity</h4>\n\n<p>In terms of features, both ocaml-lsp and merlin are pretty much on par with each other.</p>\n\n<p>ocaml-lsp lacks one feature though: determining the type of a selected block of code. Its a pretty nifty feature thanks to OCaml's strong typing system and merlin.</p>\n\n<p>Quoting Marek Kubica from OCaml forums: <a href=\"https://discuss.ocaml.org/t/merlin-vs-ocaml-lsp/8887/2\">↗</a></p>\n\n<blockquote cite=\"https://discuss.ocaml.org/t/merlin-vs-ocaml-lsp/8887/2\">\nThe only thing I’ve used with Merlin directly that I don’t have at the moment is determining the type of a selection.\n</blockquote>\n\n<h4>Dependency on dune</h4>\n\n<p>ocaml-lsp depends on dune to generate type information. Merlin does not need it. Legacy projects predating dune have found this to be a hurdle in transitioning to ocaml-lsp.</p>\n\n<h4>Speed</h4>\n\nocaml-lsp, despite being an abstraction on top of merlin, feel faster than the direct merlin because ocaml-lsp operates asynchronously.\n\n<p>Quoting Rudi Grinberg from OCaml forums: <a href=\"https://discuss.ocaml.org/t/merlin-vs-ocaml-lsp/8887/4\">↗</a></p>\n\n<blockquote cite=\"https://discuss.ocaml.org/t/merlin-vs-ocaml-lsp/8887/4\">\nIn my experience the editor frontends that come with merlin perform poorly compared to their LSP counterparts. In Emacs for example, I recall that switching to eglot to ocamllsp gave me a very noticeable boost in completion performance and error checking performance.\n</blockquote>\n\n<p>In a (significantly) large codebase, the editing experience in vim/emacs+merlin has reported to become less responsive and more laggy.</p>\n\n\n<h2>Editing setups</h2>\n\n<p>I will list a few editing setups I have seen in use.</p>\n\n<h3>Official, popular setups</h3>\n\n<p>These are official in the sense that setup instructions are <a href=\"https://ocaml.org/docs/set-up-editor\">available on the official website.</a></p>\n\n<ul>\n<li>merlin + emacs</li>\n<li>merlin + vim</li>\n<li>ocaml-lsp + vscode</li>\n</ul>\n\n<h3>Unofficial, popular setups</h3>\n\n<p>Thanks to ocaml-lsp, alternatives have emerged:</p>\n\n<ul>\n<li>ocaml-lsp + neovim</li>\n<li>ocaml-lsp + emacs</li>\n</ul>\n\n<h3>Worthy outliers</h3>\n\n<ul>\n<li>IntelliJ with <a href=\"https://plugins.jetbrains.com/plugin/9440-reasonml\">ReasonML</a> plugin by Herve Giraud. The only one that does not use merlin underneath, rather takes advantage of IntelliJ's IDE infrastructure.</li>\n<li>ocaml-lsp + helix</li>\n<li>Anything else that can work with LSP protocol, like KDE's Kate editor</li>\n<li>Thanks to a strong static typing with a very fast compiler and a built tool with watch mode, some ditch tooling altogether and go with plain vim or emacs or even <a href=\"https://discuss.ocaml.org/t/which-editor-ide-do-you-use-when-developing-ocaml-projects/362/27\">nano</a></li>\n</ul>\n\n<h2>My excursions</h2>\n\n<p>I care a lot about vim-like modal editing.</p>\n\n<p>The other thing I care about: less hassle to set up.</p>\n\n<p>Now, let's see how some of these have fared for me.</p>\n\n<h3>merlin + emacs</h3>\n\n<p>The glue packages in this case are <strong>tuareg</strong> and <strong>user-setup</strong>.</p>\n\n<p>Unfortunately, <a href=\"https://ocaml.org/docs/set-up-editor#vim-and-emacs\">official instructions</a> didn't work for me. Instructions <a href=\"https://dev.realworldocaml.org/install.html#editor-setup\">from Real World OCaml</a> did:</p>\n\n<pre><code>$ opam install user-setup tuareg ocamlformat merlin\n$ opam user-setup install</code></pre>\n\n<p>There is another alternative to tuareg - <strong>caml-mode</strong>, but I haven't tried it.</p>\n\n<p>Tuareg also provides a <i>Send to REPL for evaluation</i> action, which provides a quick way to test and design code on-the-fly.</p>\n\n<p>This setup works (type inference, error detection, etc.), but is very barebones. I realised I had to do a lot more on Emacs side - install and configure packages like flycheck, eldoc, merlin-eldoc, and what not - to modernise the editing experience. I stopped here.</p>\n\n<h3>merlin + vim</h3>\n\n<p>The glue package is <strong>user-setup</strong>.</p>\n\n<p>However, this setup did not work due to the following error:</p>\n\n<pre><code>\"src/soup.ml\" 1326L, 39757B\nError detected while processing BufRead Autocommands for \"*.ml\"..FileType Autocommands for \"*\"..function &lt;SNR&gt;4_LoadFTPlugin[18]..script /Users/jb/projects/lambdasoup/_opam\n/share/merlin/vim/ftplugin/ocaml.vim[2]../Users/jb/projects/lambdasoup/_opam/share/merlin/vim/autoload/merlin.vim:\nline    9:\nError: Required vim compiled with +python or +python3\nError detected while processing BufRead Autocommands for \"*.ml\"..FileType Autocommands for \"*\"..function &lt;SNR&gt;4_LoadFTPlugin[18]..script /Users/jb/projects/lambdasoup/_opam\n/share/merlin/vim/ftplugin/ocaml.vim:\nline    2:\nE117: Unknown function: merlin#Register\nPress ENTER or type command to continue</code></pre>\n\n<p>I get the issue of course: my vim is not compiled with python. But it also means that now I have to look for a vim that is compiled with python. And I tried out two vims: macOS's default vim, and the vim in nixpkgs.</p>\n\n<p>So I moved on.</p>\n\n<h3>ocaml-lsp + vscode</h3>\n\n<p>The glue package is <strong>VSCode OCaml Platform</strong>, which, besides integrating ocaml-lsp, also brings together ocamlformat, opam environment sandbox selection tool, etc., under a single VS Code extension.</p>\n\n<p>Despite that fact that there is one more abstraction to deal with - ocaml-lsp built on top of merlin - this setup has been one of the most seamless.</p>\n\n<p>It is also the top official recommendation now, thanks to a lot of effort put in by OCaml tooling developers.</p>\n\n<p>The extension also provides a \"Send to REPL for evaluation\" action, much popular with the Emacs crowd.</p>\n\n<p>The experience hasn't been 100% flawless though. Once, when I opened VS Code with an OCaml project, the editor didn't show any type hints at all. No errors were thrown either. After a long debugging session, it turned out that the OCaml LSP did throw an error saying that VS Code needs to be updated, but it was buried in Output Pane's OCaml LSP tab. I wish that the Output window had popped up on its own to highlight the error, instead of having to look for the problem myself. I have seen this happen in some other language project.</p>\n\n<p>This is VS Code specific, but I also miss a good modal editing experience. I also keep getting bugged by a weird problem caused due to my MacBook's virtual Fn bar and while executing a specific keychord sequence, in which a slight touch from one of my raised fingers triggers the find window in VS Code. Very annoying!</p>\n\n<h3>ocaml-lsp + neovim</h3>\n\n<p>The glue package is <strong>nvim-lspconfig</strong>.</p>\n\n<p>This setup has often broken down, though the <strong>fault lied with the constant churn in neovim and neovim's LSP ecosystem</strong> more than with OCaml tooling.</p>\n\n<p>There are a lot of other helper neovim packages to reckon with, like, the configurations of which I copy-paste and then pray for them to keep working.</p>\n\n<p>When everything works, this is the most elegant setup for me. However, once in a while, when I load an OCaml project in neovim, some setup-related error would pop up.</p>\n\n<p>Debugging a broken neovim configuration is a nightmare I wouldn't wish upon my enemy.</p>\n\n<h3>ocaml-lsp + helix</h3>\n\n<p><strong>There is no glue package.</strong> This has been <strong>the only zero-config setup</strong> for me.</p>\n\n<p>Only Helix has worked immediately and flawlessly for me.</p>\n\n<h2>Conclusion</h2>\n\n<p>At this point, I would consider the merlin-based setups appropriate only for <strong>veterans and advanced users</strong>. They are worth it only if you care about having every fringe feature available under merlin and don't mind going through some pain of setting things up.</p>\n\n<p>merlin-based setup might also be the only sane option if a project does not use dune as its build tool. But don't quote me on this.</p>\n\n<p>A <strong>beginner</strong> should absolutely choose VS Code OCaml Platform. When there is a whole new ecosystem to reckon with, you don't want to be scared away by the editing experience.</p>\n\n<p>Only Helix provides a similar seamless experience. So VS Code dodgers can choose helix (at the cost of the baggage of a non-vim modal editing).</p>\n\n<p>To vim lovers, I recommend the ocaml-lsp + neovim route.</p>\n\n<p>To emacs lovers, I recommend the ocaml-lsp + emacs route.</p>",
    "excerpt": "For a small community, OCaml ecosystem is quite rich, maybe too rich, in editor tooling.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "15th April 2024",
    "published": "2024-04-15T11:31:21Z",
    "collections": [
      "OCaml"
    ],
    "id": "urn:uuid:6ac9fa5c-7838-41ef-ad83-d460315fa18c",
    "title": "An overview of OCaml editor tooling"
  },
  {
    "url": "/2024/memorising-git-rebase",
    "page_file": "site/2024/memorising-git-rebase.html",
    "nav_path": [
      "2024"
    ],
    "content": "<p>In a <code>git rebase x</code> command, is <code>x</code> being rebased on the current branch, or vice versa?</p>\n\n<p>I mentally always read <i>rebase</i> as <i>rebase on top of</i>.</p>\n\n<p>So, <code>git rebase master</code> reads as <strong><i>git, rebase on top of master</i></strong>, i.e., rebase the current branch on top of master.</p>\n\n<p>But what about the alternate version of the command: <code>git rebase master feat/x</code> ?</p>\n\n<p>Well, git always rebases the <strong>current</strong> branch.</p>\n\n<p>So <code>git rebase master feat/x</code> is actually <code>git checkout feat/x &amp;&amp; git rebase master</code> . So the reading <i>git rebase on top of master</i> still applies.</p>\n\n<p>A bit clunky, but good enough for me.</p>",
    "excerpt": "In a <code>git rebase x</code> command, is <code>x</code> being rebased on the current branch, or vice versa?",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "5th March 2024",
    "published": "2024-03-05T11:31:21Z",
    "collections": [
      "Git"
    ],
    "id": "urn:uuid:aa8b98ca-36f9-4a95-9b18-2b8a75335e17",
    "title": "Memorising branch order in git rebase"
  },
  {
    "url": "/2024/switching-to-fish-shell",
    "page_file": "site/2024/switching-to-fish-shell.html",
    "nav_path": [
      "2024"
    ],
    "content": "<div class=\"toc\"></div>\n\n<h2>Update: 5 May 2024</h2>\n\n<p>I have come crawling back to bash. Why?</p>\n\n<ul>\n<li>My interest in system, infrastructure, and developer tooling is growing. I don't see much place for a non-bash shell in that space. </li>\n<li>I have time for only one niche ecosystem in my life. I have already chosen OCaml as it.</li>\n<li>fish is too syntax-incompatible with bash, right down to inline declaration of env vars before executing a command. If I have to recall the fish syntax for every little thing, then it's just not worth it.</li>\n</ul>\n\n<h2>Original article</h2>\n\n<p>Here, I am putting down my reasons to choose <code>fish</code> shell for my future self.</p>\n\n<p>All I want is a shell that is</p>\n\n<ul>\n<li>a first-class citizen on macOS and Linux</li>\n<li>low maintenance, which means</li>\n<li>out-of-the-box or low-configuration autocompletion and fuzzy history search</li>\n<li>adequately supported by third-party tools</li>\n</ul>\n\n<p>I don't use shell much beyond that.</p>\n\n<p>I also don't care much about scripting compabilities as I have never had to share scripts with others. Also, I prefer to write my scripts in typed, FP languages like Scala.</p>\n\n<p><code>fish</code> checks all those boxes.</p>\n\n<p><code>bash</code> is anything but first-class on macOS now.</p>\n\n<p><code>zsh</code> is powerful, and comes with a lot of bells and whistles, most of them do not come out-of-the-box. I need to lug around a few packages (like <code>zsh-completions</code>) and a lot of configuration. I also need to maintain configuration for <code>fzf</code> for fuzzy search.</p>\n\n<p>At the very least, I will stop worrying and wasting time in maintaining parity between bash and zsh configs.</p>",
    "excerpt": "I have come crawling back to bash. Why?",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "6th February 2024",
    "published": "2024-02-06T11:31:21Z",
    "collections": [
      "Shell"
    ],
    "id": "urn:uuid:972047d6-1709-42ab-b18e-fa68f6a760b5",
    "title": "<del>I switched to fish shell</del> Nope. Back to bash."
  },
  {
    "url": "/2023/opam-local-switch-and-dune-init-project",
    "page_file": "site/2023/opam-local-switch-and-dune-init-project.html",
    "nav_path": [
      "2023"
    ],
    "content": "<div class=\"toc\"></div>\n\n<p>In the OCaml ecosystem, opam is the most popular package management tool, while dune is the foremost build tool.</p>\n\n<p>Both have evolved independently. While they manage to work in tandem, there are a lot of irregularities to trip on\nwhere they meet.</p>\n\n<h2>Local switch in opam</h2>\n\n<p>opam's local switch feature can set up and isolate development environment and dependencies per project.</p>\n\n<p><code>opam switch create</code> creates a local switch if it is given the path to a directory. If the specified\ndirectory does not exist, then its is created.</p>\n\n<pre><code>opam switch create ./path/to/existing/dir</code></pre>\n\n<p>The above command creates an <i>_opam</i> directory inside the given path, inside which all of the opam-related\nartifacts for this project are stored.</p>\n\n<p>A cool side-effect is that when a directory containing a local opam switch is visited, that switch is activated\nautomatically. No need to <code>opam switch set</code> the switch explicitly.</p>\n\n<h2>dune init project</h2>\n\n<p><code>dune init project</code> is the recommended way to bootstrap an OCaml project.</p>\n\n<pre><code>dune init project prj_name</code></pre>\n\n<p> The above command creates a directory named <i>prj_name</i> in the current directory, and populates it with project\nartifacts.</p>\n\n<p>I found that dune cannot bootstrap a project in the current directory itself. So <code>dune init project .</code>\nfails to work.</p>\n\n<h2>The problem</h2>\n\n<p> I prefer to use opam's local switch feature to ensure the isolatation of all dependencies and tools related to an\nOCaml project. This means I also prefer to install dune per-project. So </p>\n\n<ol>\n<li>I want to use dune to bootstrap a project</li>\n<li>dune is installed through opam</li>\n<li>opam needs a local switch for per-project installation</li>\n<li>A local switch needs an existing empty project directory</li>\n<li>dune cannot bootstrap a project in a current directory</li>\n</ol>\n\n<p>The chicken and egg problem looks easy now, huh?</p>\n\n<p>I started guessing a solution. </p>\n\n<hgroup>\n<h3>Attempt 1</h3>\n<p>Execute opam and dune commands from parent directory</p>\n</hgroup>\n\n<p>I planned the following idealised sequence of commands:</p>\n\n<pre><code># create an empty project dir\n~/projects $ mkdir my_prj\n\n# create a local switch\n~/projects $ opam switch create ./my_prj\n\n# install dune in our local switch\n~/projects $ opam install dune\n\n# bootstrap project\n~/projects $ dune init project my_prj</code></pre>\n\n<p>I didn't make it past the 3rd command of installing dune because of the following (reasonable) error:</p>\n\n<pre><code>$ opam install dune\n[ERROR] No switch is currently set. Please use 'opam switch'\nto set or install a switch.</code></pre>\n\n<p>Ok, then. I tried to set the switch after creating it.</p>\n\n<pre><code>~/projects $ mkdir my_prj\n~/projects $ opam switch create ./my_prj\n~/projects $ opam switch set ./my_prj\n[ERROR] Can not set external switch '/Users/jb/projects/my_prj' globally. To set\nit in the current shell use:\neval $(opam env --switch=/Users/jb/projects/my_prj --set-switch)</code></pre>\n\n<p>The advice felt like a long-winded solution to me. I wanted a simpler solution.</p>\n\n<p>So may be, first, I should enter the empty project directory to set up the project.</p>\n\n<hgroup>\n<h3>Attempt 2</h3>\n<p>Execute opam and dune commands from project directory</p>\n</hgroup>\n\n<p>I carried out the following sequence of commands:</p>\n\n<pre><code>~/projects $ mkdir my_prj\n~/projects $ cd my_prj \n~/projects/my_prj $ opam switch create . \n~/projects/my_prj $ opam install dune\n~/projects/my_prj $ dune init project my_prj</code></pre>\n\n<p>The above sequence creates a <code>my_prj/my_prj/</code> directory tree. That's not what I wanted.</p>\n\n<p>Now what?</p>\n\n<hgroup>\n<h3>Solution</h3>\n<p>exploit opam's auto-activation of local switch</p>\n</hgroup>\n\n<p>Now, consider the following sequence of commands:</p>\n\n<pre><code># create an empty project dir\n~/projects $ mkdir my_prj\n\n~/projects $ cd my_prj \n\n# create a local switch, which is auto-activated after a successful creation\n# because the switch is created in the current directory itself.\n~/projects/my_prj $ opam switch create . \n\n~/projects/my_prj $ opam install dune\n\n# go back to parent, with opam still pointing to the local switch env\n# until the current session ends or until another switch is activated\n~/projects $ cd .. \n\n# bootstrap our project\n~/projects/my_prj $ dune init project my_prj</code></pre>\n\n<p>Note the 3rd command <code>opam switch create .</code>. After the command finishes execution, the switch is\nauto-activated because the local switch lives in the current directory <code>.</code> itself.</p>\n\n<p>opam also sets an env var <code>OPAM_SWITCH_PREFIX</code> to the path of this activated switch.</p>\n\n<pre><code>$ echo $OPAM_SWITCH_PREFIX \n/Users/jb/projects/my_prj/_opam</code></pre>\n\n<p>This env var probably lives on until the current shell session ends even if the directory changes, or until another\nswitch is activated.</p>\n\n<aside>\n<p>If the directory is changed at this point, then <code>opam switch list</code> no longer shows an active switch.\nHowever, <code>OPAM_SWITCH_PREFIX</code> still points to our my_prj local switch until a directory with another local\nswitch is visited.</p>\n\n<p>Also, my machine's opam setup does not a global switch at all. I am not sure how opam would behave amidst all of this\nin presence of a global switch. A case for another time, may be.</p>\n</aside>\n\n<p>That means that when the above command sequence goes one directory up to execute <code>dune init project</code>, opam\nis still pointing to the right local switch env.</p>\n\n<p>Also dune does not mind if the directory <i>my_prj</i> already exists.</p>\n\n<p>Case solved!</p>\n\n<p>I can imagine a variation of the above sequence:</p>\n\n<pre><code># create an empty project dir\n~/projects $ mkdir my_prj\n\n# create our local switch\n~/projects $ opam switch create ./my_prj \n\n# activate our local switch\n~/projects $ cd my_prj \n\n# go back to parent, with opam still pointing to the local switch env\n# until the current session ends or until another switch is activated\n~/projects/my_prj $ cd .. \n\n# install dune in our local switch\n~/projects $ opam install dune\n\n# bootstrap our project\n~/projects $ dune init project my_prj</code></pre>\n\n<h2>What next?</h2>\n\n<p>There is <a href=\"https://discuss.ocaml.org/t/extending-dune-with-package-management/5649\">work under progress</a> to\nwrap dune around opam, thus making dune as the unifying package management and build solution.</p>",
    "excerpt": "In the OCaml ecosystem, opam is the most popular package management tool, while dune is the foremost build tool.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "3rd December 2023",
    "published": "2023-12-03T11:31:22Z",
    "collections": [
      "OCaml"
    ],
    "id": "urn:uuid:e5759f6b-3be5-4219-aad2-35e9d8c1ebe2",
    "title": "Make an opam local switch and <code>dune init project</code> work together"
  },
  {
    "url": "/2023/fixing-ocaml-compiler-build-on-apple-silicon",
    "page_file": "site/2023/fixing-ocaml-compiler-build-on-apple-silicon.html",
    "nav_path": [
      "2023"
    ],
    "content": "<div class=\"toc\"></div>\n\n<h2>Problem</h2>\n\n<p>OCaml compiler failed to build on my M1 Macbook with Apple's Silicon architecture.</p>\n\n<pre><code>$ opam switch create . 4.14.1 -y --deps-only\n\n&lt;&gt;&lt;&gt; Installing new switch packages &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;  🐫 \nSwitch invariant: [\"ocaml-base-compiler\" {= \"4.14.1\"} | \"ocaml-system\" {= \"4.14.1\"}]\n[NOTE] External dependency handling not supported for OS family 'macos'.\n        You can disable this check using 'opam option --global depext=false'\n\n&lt;&gt;&lt;&gt; Processing actions &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;  🐫 \n∗ installed base-bigarray.base\n∗ installed base-threads.base\n∗ installed base-unix.base\n∗ installed ocaml-options-vanilla.1\n⬇ retrieved ocaml-base-compiler.4.14.1  (cached)\n[ERROR] The compilation of ocaml-base-compiler.4.14.1 failed at\n        \"make -j7\".\n\n#=== ERROR while compiling ocaml-base-compiler.4.14.1 ===========#\n# context     2.1.5 | macos/arm64 |  | https://opam.ocaml.org#bc52affc\n# path        ~/projects/aoc-2023/ocaml/_opam/.opam-switch/build/ocaml-base-compiler.4.14.1\n# command     ~/.opam/opam-init/hooks/sandbox.sh build make -j7\n# exit-code   2\n# env-file    ~/.opam/log/ocaml-base-compiler-11985-7b627b.env\n# output-file ~/.opam/log/ocaml-base-compiler-11985-7b627b.out\n### output ###\n# [...]\n# signals_nat.c:221:5: error: no member named '__pc' in 'struct __darwin_x86_thread_state64'\n#     CONTEXT_PC = (context_reg) &amp;caml_stack_overflow;\n#     ^~~~~~~~~~\n# ./signals_osdep.h:182:37: note: expanded from macro 'CONTEXT_PC'\n#   #define CONTEXT_PC (CONTEXT_STATE.__pc)\n#                       ~~~~~~~~~~~~~ ^\n# 4 errors generated.\n# make[3]: *** [signals_nat.n.o] Error 1\n# make[3]: *** Waiting for unfinished jobs....\n# make[2]: *** [makeruntimeopt] Error 2\n# make[1]: *** [opt.opt] Error 2\n# make: *** [world.opt] Error 2\n\n\n\n&lt;&gt;&lt;&gt; Error report &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;  🐫 \n┌─ The following actions failed\n│ λ build ocaml-base-compiler 4.14.1\n└─ \n┌─ The following changes have been performed (the rest was aborted)\n│ ∗ install base-bigarray         base\n│ ∗ install base-threads          base\n│ ∗ install base-unix             base\n│ ∗ install ocaml-options-vanilla 1\n└─ \n\n&lt;&gt;&lt;&gt; ocaml-base-compiler.4.14.1 troubleshooting &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;  🐫 \n=&gt; A failure in the middle of the build may be caused by build\n    parallelism\n        (enabled by default).\n        Please file a bug report at\n    https://github.com/ocaml/opam-repository/issues\n=&gt; You can try installing again including --jobs=1\n        to force a sequential build instead.\nSwitch initialisation failed: clean up? ('n' will leave the\nswitch partially installed) [Y/n] y</code></pre>\n\n<h2>Hacky solution</h2>\n\n<p>If you have the same issue, then try specifying the architecture explicitly. </p>\n\n<pre><code>$ arch -arm64 opam switch create . 4.14.1 -y --deps-only</code></pre>\n\n<p>Apply the same approach to install packages too.</p>\n\n<pre><code>$ arch -arm64 opam install dune</code></pre>\n\n<p>There has to be a better way though.</p>\n\n<p>P.S.: Even dune does not work without it!</p>\n\n<pre><code>$ arch -arm64 dune exec bin/main.exe</code></pre>\n\n<h2>Update (<time datetime=\"2024-02-23\">23 Feb 2024</time>) : Better solution</h2>\n\n<p>JM from OCaml discord helped me to discover the underlying issue - my Terminal.app was running in Rosetta mode. I had\nconfigured it to run on Rosetta during the initial Silicon-Rosetta churn, but forgotten all about it.</p>\n\n<p>So, opam, which uses <a href=\"https://github.com/ocaml/opam/issues/5853\"><code>uname -a</code></a> to find the\nunderlying architecture, always got <code>x86_64</code>. </p>\n\n<p>Once I unchecked the <i>Open using Rosetta</i> option, <code>arch -arm64</code> was no longer needed.</p>\n\n<p><a href=\"https://apple.stackexchange.com/a/453954\">From what I understand</a>, if <i>any</i> tool or binary across a\ntoolchain is configured to run through Rosetta - be it the Terminal.app, or the shell, or a helper binary like <code>uname</code>\n- then the program using this toolchain could end up using the wrong architecture.</p>",
    "excerpt": "OCaml compiler failed to build on my M1 Macbook with Apple's Silicon architecture.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "1st December 2023",
    "published": "2023-12-01T11:31:22Z",
    "collections": [
      "OCaml"
    ],
    "id": "urn:uuid:6e7ebece-1f47-4461-b284-a0094aacf55e",
    "title": "Spoonfeeding machine architecture to OCaml toolchain on Apple Silicon"
  },
  {
    "url": "/2023/movie-is-better-than-book",
    "page_file": "site/2023/movie-is-better-than-book.html",
    "nav_path": [
      "2023"
    ],
    "content": "<p> This list will likely (hopefully) remain short. </p>\n\n<ol reversed=\"reversed\">\n<li> Dune series. I felt that words in <i>Dune</i> (Book 1 of the series) didn't convey its strongest moments well. <i>Presently</i>, I am struggling to get into <i>Dune Messiah</i> (Book 2 of the series). </li>\n<li> Bullet train (at least when compared to the translated-to-English version of the book)</li>\n</ol>",
    "excerpt": "This list will likely (hopefully) remain short.",
    "author_name": "Jayesh Bhoot",
    "updated_text": "11 Sep 2024",
    "updated": "2024-09-11T11:20:34Z",
    "published_text": "9th October 2023",
    "published": "2023-10-09T11:31:22Z",
    "collections": [
      "Books"
    ],
    "id": "urn:uuid:bea230bc-0afb-47ac-b73e-631dc8691602",
    "title": "List of movies better than their book counterparts"
  },
  {
    "url": "/2023/an-elegant-triplet-of-fonts",
    "page_file": "site/2023/an-elegant-triplet-of-fonts.html",
    "nav_path": [
      "2023"
    ],
    "content": "<p> I use the following set of fonts. </p>\n\n<table>\n<caption>An elegant triplet of fonts that go together</caption>\n<thead>\n<tr>\n<th>Type</th>\n<th>Font</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sans Serif</td>\n<td>PT Sans</td>\n</tr>\n<tr>\n<td>Serif</td>\n<td>Gentium Book Plus</td>\n</tr>\n<tr>\n<td>Monospace</td>\n<td>\n<ul>\n<li>PT Mono; or</li>\n<li>Latin Modern Mono; or</li>\n<li>Courier; or</li>\n<li>Courier Screenplay; or</li>\n<li>Courier Prime; or</li>\n<li>Monaco</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<h2>Sans-serif I v/s l</h2>\n\n<p>Many sans serif fonts fail to distinguish between uppercase I and lowercase l. Twitter's new font is an example of\nthis.</p>\n\n<p>On top of that, Twitter started dishing out blue ticks on subscriptions.</p>\n\n<p>These two features combine to form deceptive Twitter usernames, as demonstrated in <a href=\"https://twitter.com/aardrian/status/1591045578544353280\">this tweet by Adrian Roselli</a>.</p>\n\n<p>Some famous fonts like Helvetica and Roboto fail at it.</p>\n\n<figure>\n<img src=\"/static/images/appletvplus-font-test-helvetica-fail.png\">\n<figcaption>Helvetica has identical looking uppercase I and lowercase l.</figcaption>\n</figure>\n\n<figure>\n<img src=\"/static/images/appletvplus-font-test-roboto-fail.png\">\n<figcaption>Roboto has identical looking uppercase I and lowercase l.</figcaption>\n</figure>\n\n<p>But PT Sans passes this AppleTVPlus test.</p>\n\n<figure>\n<img src=\"/static/images/appletvplus-font-test-pt-sans-pass.png\">\n<figcaption>PT Sans distinguishes between uppercase I and lowercase l by putting a tail on l.</figcaption>\n</figure>\n\n<div class=\"draft\">\nAdd a word document screenshot showing each font with AppleTVPIus and jiIl|10Oo\n\n- Passes with flying colours, due to a slabbed capital i : Droid Sans, Noto Sans, IBM Plex Sans\n- Passes due to a tailed l: Aptos, PT Sans, Ubuntu, Atkinson Hyperlegible, Fira Sans\n- Fails: Helvetica, Roboto, Inter, Apple's new default San Fransisco Pro, Cantarell, Segoe, Calibri, Droid Sans\n- Clear winner: Atkinson Hyperlegible. Passes the jiIl|10Oo better than all others, due to a tailed small-l and a slashed zero. Followed by Droid Sans and Noto Sans.\n\nI like this font because readers can tell the difference between I and l and 1 and |: https://twitter.com/aardrian/status/1433770392343269389\n\nAnother test: jiIl|10Oo\n\nhomoglyph attack vector: https://twitter.com/aardrian/status/1590863173942661121\n</div>",
    "excerpt": "I use the following set of fonts.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "12th June 2023",
    "published": "2023-06-12T11:31:22Z",
    "collections": [
      "Fonts"
    ],
    "id": "urn:uuid:de454181-6576-46c5-9017-afffb721ff58",
    "title": "An elegant triplet of fonts"
  },
  {
    "url": "/2022/how-to-mark-up-a-code-snippet-in-html",
    "page_file": "site/2022/how-to-mark-up-a-code-snippet-in-html.html",
    "nav_path": [
      "2022"
    ],
    "content": "<p>Suppose, we want to mark up the following multi-line snippet of JavaScript code:</p>\n\n<figure>\n<pre><code class=\"language-javascript\">function hello(name) {\n  return \"Hello, \" + name;\n}</code></pre>\n<figcaption>\nA JavaScript function that greets a user Joe with \"Hello, Joe!\"\n</figcaption>\n</figure>\n\n<p>Out of habit, let's start by wrapping it in a <code>pre</code> tag.</p>\n\n<figure>\n<pre><code class=\"language-html\">&lt;pre&gt;\n  function hello(name) {\n    return \"Hello, \" + name;\n  }\n&lt;/pre&gt;</code></pre>\n<figcaption>\nMark up a code snippet with <code>pre</code> tag only. Looks good enough, but not conveyed good enough.\n</figcaption>\n</figure>\n\n<p>However, the <a href=\"https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element\">HTML spec</a>\ndefines <code>pre</code> as</p>\n\n<blockquote cite=\"https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element\">\nThe <code>pre</code> tag represents a block of <em>preformatted text</em>, in which structure is represented by\ntypographic conventions\nrather than by elements.\n</blockquote>\n\n<p>So, a <code>pre</code> tag can contain anything which conveys its semantic meaning at least partly through how its\ntext is formatted,\nlike a code snippet, a poem, or an ascii art.</p>\n\n<p>Clearly, <code>pre</code> tag is not enough to represent a code snippet. How do we distinguish a code snippet from\nother\npre-formatted content? By marking up the snippet with <code>code</code>, and then wrapping it in a\n<code>pre</code> tag.\n</p>\n\n<figure>\n<pre><code class=\"language-html\">&lt;pre&gt;\n  &lt;code&gt;\n    function hello(name) {\n      return \"Hello, \" + name;\n    }\n  &lt;/code&gt;\n&lt;/pre&gt;</code></pre>\n<figcaption>\nMark up a multi-line code snippet with <code>code</code> tag, and then wrap that <code>code</code> tag\nin a <code>pre</code> tag\n</figcaption>\n</figure>\n\n<p>Now, how do we convey that the language of the code snippet is JavaScript?</p>\n\n<p>HTML spec has an answer to that too:</p>\n\n<blockquote cite=\"https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-code-element\">\nThere is no formal way to indicate the language of computer code being marked up. Authors who wish to mark code\nelements\nwith the language used, e.g. so that syntax highlighting scripts can use the right rules, can use the class\nattribute,\ne.g. by adding a class prefixed with \"language-\" to the element.\n</blockquote>\n\n<p>In short, assign to the <code>code</code> tag a class named <b>language-name of the programming language</b>.</p>\n\n<figure>\n<pre><code>&lt;pre&gt;\n  &lt;code class=\"language-javascript\"&gt;\n    function hello(name) {\n      return \"Hello, \" + name;\n    }\n  &lt;/code&gt;\n&lt;/pre&gt;</code></pre>\n<figcaption>A <code>code</code> tag containing a JavaScript snippet should be given a class named\n<strong>language-javascript</strong>.\n</figcaption>\n</figure>\n\n<p>There is still one improvement left, which applies to <code>pre</code> tag in general.</p>\n\n<p>Conveying formatting of a text can be difficult to a visually-challenged user, just like conveying an image is.</p>\n\n<p>In order to assist such a user with an alternate description, wrap such semi-accessible content in a\n<code>figure</code> tag, and put\nthe alternate description in a <code>figcaption</code> tag.\n</p>\n\n<figure>\n<pre><code>&lt;figure&gt;\n  &lt;pre&gt;\n    &lt;code class=\"language-javascript\"&gt;\n      function hello(name) {\n        return \"Hello, \" + name;\n      }\n    &lt;/code&gt;\n  &lt;/pre&gt;\n  &lt;figcaption&gt;\n      A code tag containing a JavaScript snippet\n      should be given a class named language-javascript.\n  &lt;/figcaption&gt;\n&lt;/figure&gt;</code></pre>\n<figcaption>Wrap a <code>pre</code> tag in a <code>figure</code> tag, and put a <code>figcaption</code> tag inside\nthe <code>figure</code> tag that provides an\nalternate description to the contents of the <code>pre</code> tag.\n</figcaption>\n</figure>",
    "excerpt": "Suppose, we want to mark up the following multi-line snippet of JavaScript code:",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "6th October 2022",
    "published": "2022-10-06T11:31:21Z",
    "collections": [
      "HTML",
      "Accessibility"
    ],
    "id": "urn:uuid:83afeb98-3ab6-4a2c-a1ea-4601afc53dfb",
    "title": "How to mark up a code snippet in HTML"
  },
  {
    "url": "/2022/location-of-emacs-config",
    "page_file": "site/2022/location-of-emacs-config.html",
    "nav_path": [
      "2022"
    ],
    "content": "<p>If <code>~/.emacs.d</code> exists in the system, which always does because emacs auto-creates it, then emacs does not\npick up <code>init.el</code> from <code>~/.config/emacs</code> for some reason...even if <code>~/.emacs.d</code> is\nempty.</p>\n\n<p>So I chose <code>~/.emacs.d</code> as emacs's config location.</p>",
    "excerpt": "If <code>~/.emacs.d</code> exists in the system, which always does because emacs auto-creates it, then emacs does not\npick up <code>init.el</code> from <code>~/.config/emacs</code> for some reason...even if <code>~/.emacs.d</code> is\nempty.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "24th September 2022",
    "published": "2022-09-24T11:31:21Z",
    "collections": [
      "Emacs"
    ],
    "id": "urn:uuid:8a234ceb-901a-4448-8826-a5e49716c251",
    "title": "Location of emacs config"
  },
  {
    "url": "/2022/box-sizing",
    "page_file": "site/2022/box-sizing.html",
    "nav_path": [
      "2022"
    ],
    "content": "<p><code>box-sizing</code> specifies the part of an element's CSS box, to which the properties <code>width, min-width,\nmax-width,\nheight, min-height, max-height</code> apply.</p>\n\n<figure>\n    <pre><code class=\"language-css\">\np {\n    height: 3rem; \n    box-sizing: content-box;\n}\n</code></pre>\n    <figcaption>Result: brown content box is 3rem tall</figcaption>\n</figure>\n\n<figure>\n    <pre><code class=\"language-css\">\np {\n    height: 3rem; \n    box-sizing: border-box;\n}\n</code></pre>\n    <figcaption>Result: black border box is 3rem tall</figcaption>\n</figure>\n\n<style>\n    figure {\n        display: inline flex;\n        flex-direction: column;\n        gap: 5px;\n        margin: 0;\n        border: 1px solid #dcdee0;\n        line-height: 1;\n    }\n\n    figure > * {\n        margin: 0;\n    }\n\n    figure:first-of-type > figcaption {\n        display: inline-block;\n        font-weight: 600;\n        color: white;\n        background-color: brown;\n        background-clip: content-box;\n        box-sizing: content-box;\n        height: 3rem;\n        border: 0.5rem solid black;\n        padding: 0.5rem;\n    }\n\n    figure:last-of-type > figcaption {\n        display: inline-block;\n        font-weight: 600;\n        color: white;\n        background-color: brown;\n        background-clip: content-box;\n        box-sizing: border-box;\n        height: 3rem;\n        border: 0.5rem solid black;\n        padding: 0.5rem;\n\n        margin-top: 1rem;\n    }\n</style>",
    "excerpt": "<code>box-sizing</code> specifies the part of an element's CSS box, to which the properties <code>width, min-width,\nmax-width,\nheight, min-height, max-height</code> apply.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "17th September 2022",
    "published": "2022-09-17T11:31:21Z",
    "collections": [
      "CSS"
    ],
    "id": "urn:uuid:49f2ccac-8123-4080-af1c-cd47e7201a75",
    "title": "What <code>box-sizing</code> does"
  },
  {
    "url": "/2022/fake-sha256-in-a-nix-derivation",
    "page_file": "site/2022/fake-sha256-in-a-nix-derivation.html",
    "nav_path": [
      "2022"
    ],
    "content": "<p>Discovering the SHA256 hash for a derivation is a chore.</p>\n\n<p>One approach is to fake the hash with zeroes.</p>\n\n<pre><code class=\"language-nix\">sha256 = \"0000000000000000000000000000000000000000000000000000\";</code></pre>\n\n<p>This induces nix-build to throw an error containing the correct hash.</p>\n\n<p>However, even the fake hash has to be correct, i.e., needs to have the right number of zeroes in it. Otherwise,\nnix-build throws an error about the hash being invalid instead of being incorrect. This error does not contain the\ncorrect hash.</p>\n\n<p>Thankfully, Nix already binds the fake hash value to a variable <code>lib.fakeSha256</code>.</p>\n\n<pre><code class=\"language-nix\">sha256 = lib.fakeSha256;</code></pre>\n\n<p>Thanks to <a href=\"https://github.com/NixOS/nix/issues/1880#issuecomment-687579758\">paulyoung</a> for this tip.</p>\n\n<p>\n<ins datetime=\"2022-10-03\">I found a more memorable variable <code>lib.fakeHash</code>.</ins>\n</p>",
    "excerpt": "Discovering the SHA256 hash for a derivation is a chore.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "9th September 2022",
    "published": "2022-09-09T11:31:21Z",
    "collections": [
      "Nix"
    ],
    "id": "urn:uuid:913be558-883b-446e-ae0d-6b3cf5d18275",
    "title": "Fake SHA256 in a Nix derivation"
  },
  {
    "url": "/2020/hover-to-click-without-animation-in-gnome",
    "page_file": "site/2020/hover-to-click-without-animation-in-gnome.html",
    "nav_path": [
      "2020"
    ],
    "content": "<p>\nDesktop systems usually provide an accessibility feature, with which a user only has to hover the cursor\nover where he wants to click. The click goes off automatically. In GNOME, this feature is called <i>Hover\nClick</i>.\n</p>\n\n<p>\nNot having to press the mouse button makes for a much more pleasurable and efficient experience. Coupled\nwith <i>Sticky Keys</i>, <i>Hover Click</i> has also helped me recover from a hand injury.\n</p>\n\n<p>\nThe click goes off a few configurable milliseconds after the user positions the cursor. GNOME represents\nthis buffer with an animating circle, which looks pretty but gets in the way, especially if you are trying\nto course-correct the cursor position.\n</p>\n\n<p>\nThe option to disable this animation is simple but not straightforward. You need to disable all the\nanimations entirely from Gnome Tweaks:\n</p>\n\n<ol>\n<li>Open <i>Gnome Tweaks</i> tool</li>\n<li>Open <i>General</i> Tab</li>\n<li>Turn <i>Animations</i> off</li>\n</ol>\n\n<figure>\n<img src=\"/static/images/demo-gnome-hover-to-click-animation.gif\" alt=\"Hover click animation gif demo\">\n<figcaption> Hover Click feature in GNOME, with and without animation</figcaption>\n</figure>",
    "excerpt": "Desktop systems usually provide an accessibility feature, with which a user only has to hover the cursor\nover where he wants to click. The click goes off automatically. In GNOME, this feature is called <i>Hover\nClick</i>.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "5th July 2020",
    "published": "2020-07-05T11:31:22Z",
    "collections": [
      "GNOME",
      "Accessibility"
    ],
    "id": "urn:uuid:5e88869a-3274-4b58-9065-8ffcf0dabab7",
    "title": "How to use <i>Hover Click</i> without animation in GNOME"
  },
  {
    "url": "/2020/firefox-add-on-with-clojurescript",
    "page_file": "site/2020/firefox-add-on-with-clojurescript.html",
    "nav_path": [
      "2020"
    ],
    "content": "<div class=\"toc\"></div>\n\n<p>\nYou can find a sample add-on on my <a href=\"https://github.com/jayesh-bhoot/firefox-add-on-in-cljs\">GitHub</a>.\nI won't go through the code here, but will lay out the quirky development process. I will mostly focus on the\nplumbing - how ClojureScript hands over the compiled JavaScript code to the add-on.\n</p>\n\n<p>\nThe sample add-on tries to mirror the functionality of the one found in the <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension\">official\ntutorial</a> - wrap a border around the pages at mozilla.org.\n</p>\n\n\n<figure>\n<img src=\"/static/images/demo-ff-addon-cljs.png\" alt=\"The addon puts a purple border around the current webpage\">\n<figcaption>The demo add-on puts a purple border around the current webpage</figcaption>\n</figure>\n\n<h2 id=\"org9a73bf2\">Project Layout</h2>\n\n<p>\nFiguring out a clean project layout took some effort. I am satisfied with the following structure:\n</p>\n\n<pre>project-root\n|-- addon  // root for the Firefox add-on\n|   |--- manifest.json\n|   |--- // add-on artefacts like icons\n|   |--- // JS file compiled and placed here by ClojureScript compiler\n|-- src  // ClojureScript code\n|-- compile-opts.edn  // compilation options provided to ClojureScript compiler\n|-- deps.edn\n</pre>\n\n<p>\nThe goal is to isolate the artefacts of the add-on from the ClojureScript code. The add-on gets only its\nJavaScript from ClojureScript. So, isolating the rest of its artefacts - icons, manifest, etc. - into its own\ndirectory works out well. ClojureScript dominates the rest of the project layout.\n</p>\n\n<p>\nThe only time the ClojureScript compiler touches the <i>addon</i> folder is to put the compiled JavaScript in\nit.\n</p>\n\n<h2 id=\"org4352a07\">ClojureScript to JavaScript</h2>\n\n<p>\nThe compilation process by default uses <code>:optimizations :none</code>, which produces a set of JavaScript\nfiles, with the main file pointing at the others. This does not work here as the add-on does not seem to pick up\nthe secondary files from the main file.\n</p>\n\n<p>\nThe rest of the <code>:optimizations</code> options - <code>:whitespace</code>, <code>:simple</code>,\n<code>:advanced</code> - produce a single standalone JavaScript file, which the add-on happily accepts.\n</p>\n\n<p>\nHowever, <code>:optimizations :none</code> is the default because it compiles the fastest, lending a speedy development\nprocess. I went with the second fastest - <code>:whitespace</code> - for development purpose, and\n<code>:advanced</code> to compile a production build.\n</p>\n\n<p>\nTwo other compilation options helps keep the plumbing short and clean: <code>:target</code> diverts the\ntemporary files produced during compilation to a <i>tmp</i> folder, while <code>:target-to</code> puts the\nstandalone compile JavaScript file directly into the <i>addon</i> folder.\n</p>\n\n<p>\nTo summarise, we tweak the default compilation process with the following three options to keep life simple:\n</p>\n\n<pre><code class=\"language-clojure\">{:optimizations :whitespace\n :output-dir    \"tmp\"\n :output-to     \"addon/main.js\"}</code></pre>\n\n<h2 id=\"org9d85caf\">Live reload</h2>\n<p>\nBasically, we instruct the ClojureScript compiler to watch over the ClojureScript files and recompile them into\nJavaScript on change.\n</p>\n\n<pre><code class=\"language-sh\"># in project-root\nclj --main cljs.main \\\n    --watch \"src\" \\\n    --compile-opts \"compile-opts.edn\" \\\n    --compile demo.core</code></pre>\n\n<p>\nIn turn, Mozilla's web-ext tool by default watches over the add-on folder and reloads the add-on on detecting a\nchange.\n</p>\n\n<pre><code class=\"language-sh\"># in addon folder\nweb-ext run --start-url https://www.mozilla.org/en-US/</code></pre>",
    "excerpt": "I found writing Firefox add-ons to be a good way to learn the ropes in ClojureScript in a productive manner.",
    "author_name": "Jayesh Bhoot",
    "updated_text": null,
    "updated": null,
    "published_text": "4th July 2020",
    "published": "2020-07-04T11:31:22Z",
    "collections": [
      "Firefox add-on"
    ],
    "id": "urn:uuid:5f447c9e-6f5d-4cfd-98e8-e917b0429afd",
    "title": "How to write a Firefox add-on in ClojureScript"
  },
  {
    "url": "/about",
    "page_file": "site/about.html",
    "nav_path": [],
    "content": null,
    "excerpt": null,
    "author_name": null,
    "updated_text": null,
    "updated": null,
    "published_text": null,
    "published": null,
    "collections": [],
    "id": null,
    "title": null
  }
]